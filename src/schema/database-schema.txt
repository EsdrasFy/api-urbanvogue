create database ecommerce;
use ecommerce;

CREATE TABLE roles (
    id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
    role_nome VARCHAR(100) NOT NULL
);

INSERT INTO roles (role_nome) 
VALUES 
("Client"),
("Client Vip"),
("Product Manager"),
("Order Manager"),
("Customer Service"),
("Accounting and Finance"),
("Admin"),
("Owner");

CREATE TABLE user (
	user_id INT AUTO_INCREMENT PRIMARY KEY,
    google_id VARCHAR(255) UNIQUE,
    facebook_id VARCHAR(255) UNIQUE,
    github_id VARCHAR(255) UNIQUE,
    fullname VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) UNIQUE,
    verify_email BOOLEAN DEFAULT(FALSE),
    profile_img VARCHAR(255),
    password_hash CHAR(64),
    date_of_birth DATE,
    phone VARCHAR(20) UNIQUE,
    verify_phone BOOLEAN DEFAULT(FALSE),
    gender VARCHAR(50),
    cpf VARCHAR(14) UNIQUE,
    created_at DATETIME DEFAULT NOW() NOT NULL
);
select * from users;
CREATE TABLE notify_messages (
    notify_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    message VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE user_address(
	address_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    street 	VARCHAR(100) NOT NULL,
    number INT NOT NULL,
    cep VARCHAR(9) NOT NULL,
    city VARCHAR(25) NOT NULL,
    state VARCHAR(30) NOT NULL,
    type_address VARCHAR(25) NOT NULL,
    reference VARCHAR(170),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE user_cards (
    card_id INT PRIMARY KEY AUTO_INCREMENT,
    type VARCHAR(12) NOT NULL,
    user_id INT NOT NULL,
    card_number VARCHAR(19) NOT NULL,
    card_nickname VARCHAR(100) NOT NULL,
    name_holder VARCHAR(100) NOT NULL,
    cpf_holder VARCHAR(14) NOT NULL,
    card_network VARCHAR(20) NOT NULL,
    expiration_date VARCHAR(5) NOT NULL,
    cvv VARCHAR(4) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE users_roles (
    user_id INT,
    role_id INT UNSIGNED,
    FOREIGN KEY (role_id) REFERENCES roles(id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE product (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    summary TEXT NOT NULL,
    quantidy INT NOT NULL,
    sold INT,
    price DECIMAL(10, 2) DEFAULT 0,
    state BOOLEAN DEFAULT TRUE,
    category VARCHAR(100) NOT NULL,
    brand VARCHAR(100),
    guarantee VARCHAR(100),
    assessment DOUBLE DEFAULT 0,
    qtd_assessment INT,
    parcelable BOOLEAN DEFAULT FALSE,
    max_installments INT,
    interest_rate DOUBLE,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
    created_at DATETIME DEFAULT NOW() NOT NULL
);

select * from product;

CREATE TABLE product_images (
    image_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    url VARCHAR(255),
    FOREIGN KEY (product_id) REFERENCES product(id)
);

CREATE TABLE colors (
    color_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    name_color VARCHAR(90),
    FOREIGN KEY (product_id) REFERENCES product(id)
);

CREATE TABLE product_flags (
    flag_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    flag VARCHAR(50),
    FOREIGN KEY (product_id) REFERENCES product(id)
);

CREATE TABLE product_details (
    detail_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    detail VARCHAR(250),
    FOREIGN KEY (product_id) REFERENCES product(id)
);
CREATE TABLE product_sizes (
    size_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    size VARCHAR(50),
    FOREIGN KEY (product_id) REFERENCES product(id)
);

CREATE TABLE promotions (
    promotion_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    discount_percentage INT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    FOREIGN KEY (product_id) REFERENCES product(id)
);

CREATE TABLE coupons (
    coupons_id INT AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(50) NOT NULL UNIQUE,
    description TEXT NOT NULL,
    valid_category VARCHAR(50),
    valid_brand VARCHAR(50),
    discount_percentage INT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL
);	

CREATE TABLE comments (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    text_comment TEXT NOT NULL,
    user_id INT NOT NULL,
    user_img VARCHAR(255),
    username VARCHAR(50),
    product_id INT NOT NULL,
    rating DOUBLE NOT NULL,
    recommend BOOLEAN ,
    timespost TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (product_id) REFERENCES product(id)
);

CREATE TABLE comments_urls(
	id INT AUTO_INCREMENT PRIMARY KEY,
	comment_id INT NOT NULL,
    url VARCHAR(255),
	FOREIGN KEY (comment_id) REFERENCES comments(comment_id)
);
 
CREATE TABLE user_order(
    order_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    payment_method VARCHAR(50) NOT NULL,
	street 	VARCHAR(100) NOT NULL,
    number INT NOT NULL,
    cep VARCHAR(9) NOT NULL,
    status VARCHAR(25) DEFAULT'pending',
    city VARCHAR(25) NOT NULL,
    state VARCHAR(30) NOT NULL,
    created_at DATETIME DEFAULT NOW()
);

CREATE TABLE payment_pix (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    payment_id BIGINT NOT NULL,
    issuer_id VARCHAR(100) NOT NULL,
    notification_url VARCHAR(255) NOT NULL,
    qr_code TEXT NOT NULL,
    ticket_url TEXT,
    transaction_amount DECIMAL(10, 2) NOT NULL,
	discount DECIMAL(10,2) DEFAULT(0),
    coupon VARCHAR(25),
    status VARCHAR(25) NOT NULL,
    status_detail VARCHAR(25) NOT NULL,
    date_approved DATETIME,
    currency VARCHAR(10) NOT NULL,
    date_created DATETIME,
    date_of_expiration DATETIME,
    FOREIGN KEY (order_id) REFERENCES user_order(order_id)
);

CREATE TABLE payment_card (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    payment_id BIGINT NOT NULL,
    issuer_id VARCHAR(100) NOT NULL,
    transaction_amount DECIMAL(10, 2) NOT NULL,
    discount DECIMAL(10,2) DEFAULT(0),
    coupon VARCHAR(25),
    installments INT NOT NULL,
    installment_amount DECIMAL(10,2) NOT NULL,
    cpf_holder VARCHAR(14) NOT NULL,
    name_holder VARCHAR(255) NOT NULL,
    last_digits VARCHAR(4) NOT NULL,
    expiration_month INT NOT NULL,
	expiration_year INT NOT NULL,
    status VARCHAR(25) NOT NULL,
    status_detail VARCHAR(25) NOT NULL,
    date_approved DATETIME,
    currency VARCHAR(10) NOT NULL,
    date_created DATETIME,
    date_of_expiration DATETIME,
    FOREIGN KEY (order_id) REFERENCES user_order(order_id)
);

CREATE TABLE product_order(
	product_order INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	order_id INT NOT NULL ,
	product_id INT NOT NULL,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    image VARCHAR(255) NOT NULL,
    price VARCHAR(10) NOT NULL,
    color VARCHAR(100),
    size VARCHAR(100),
    quantity INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES user_order(order_id),
	FOREIGN KEY (product_id) REFERENCES product(id),
	FOREIGN KEY (user_id) REFERENCES users(user_id)
);